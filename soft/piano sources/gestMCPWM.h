/* ************************************************************************** */
/** Descriptive File Name

  Company
    ETML

  File Name
    gestMCPWM.h

  Summary
    Gestion des PWM

  Description
    Declaration des fonctions et define des valeurs utile
 */
/* ************************************************************************** */

#ifndef GESTMCPWM_H    /* Guard against multiple inclusion */
#define GESTMCPWM_H


/* ************************************************************************** */
/* ************************************************************************** */
/* Section: Included Files                                                    */
/* ************************************************************************** */
/* ************************************************************************** */


/* Provide C++ Compatibility */
#ifdef __cplusplus
extern "C" {
#endif


    /* ************************************************************************** */
    /* ************************************************************************** */
    /* Section: Constants                                                         */
    /* ************************************************************************** */
    /* ************************************************************************** */
    
#define VelocityMax 127
#define PulseWidthMaxMCPWM 1200
    
    // 60 / 127
#define MaintienPWM 60
    // 30ms
#define StartTime 300
    // 45ms
#define MonteTime 450
    
    // *****************************************************************************
    // *****************************************************************************
    // Section: Data Types
    // *****************************************************************************
    // *****************************************************************************
    
// structure pour les controles avances
struct ControlePWM {
    uint8_t ValPWM[12];
    uint16_t RemainingStartTime[12];
    uint16_t RemainingMonteTime[12];
} DataMCPWM;

    
    // *****************************************************************************
    // *****************************************************************************
    // Section: Functions
    // *****************************************************************************
    // *****************************************************************************

void gest_MCPWM_Actualise_Velocity(uint8_t nPWM, uint8_t Velocity);
void gest_MCPWM_New_Velocity(uint8_t nPWM, uint8_t Velocity);
void gest_MCPWM_Off(uint8_t nPWM);


    /* Provide C++ Compatibility */
#ifdef __cplusplus
}
#endif

#endif /* GESTMCPWM_H */

/* *****************************************************************************
 End of File
 */
